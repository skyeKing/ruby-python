ruby是纯面向对面编程的语言，其开发文档链接为：
	http://doc.rubyfans.com/
1：多字符
	ruby 		不允许 2*'a'
	python 		允许 2*'a' 输出为'aa'

2：打印输出
	ruby		打印输出使用puts() 命令, 小括号可以加，可以不加
	python		打印输出使用print  命令，尽量添加小括号

3：格式名
	ruby 		文件格式为rb
	python		文件格式为py

4：跨行注释
	ruby		 =begin =end
	python 		 ''' '''

5：ruby和python的四则运算使用方式相同，同样的
	例如：9/2   return 4
		  9.0/2 return 4.5
	对于ruby可以使用9.to_f/2 return 4.5

6：单引号和双引号
	python 中''和""没有太大区别，可以嵌套使用，
	ruby   中''相当于python的r'',而""表示字符串

7：字串内插（格式化输出）
	ruby 	格式化输出为 '#{variableName}'
	python	格式化输出为 '%s%d%f.2'%(string,int,float)

8：数据相加
	ruby和python 都不支持不同类型的数据相加 
		对于ruby：12 + "12".to_i = 24
				  "12" + 12.to_s = "1212"
		对于python：12 + int("12") = 24
					"12" + str(12) = "1212"
9：类型转换
	ruby："12".to_i result 12
			  "12abc".to_i result 12
	python：int("12") result 12
			int("12abc") 报错
10:切片操作
	ruby：不支持切片操作，如
			var1 = "abc"
			puts(var1[:2])
	python：可以使用切片操作字符和字符串

11：字符串大小写转换
	例如：声明 var1 = "stop"
	ruby：var1.upcase result "STOP"
	python: var1.upper() result "STOP"

12：数据类型判断
	ruby："var".class return String
	python：type("var") return <type 'str'>


13：循环（简化）
	ruby：6.times do
		      puts("a")
		  end
		  result "a" "a" "a" "a" "a" "a"
	python：for i in range(6):
				print("a")
			result "a" "a" "a" "a" "a" "a" 

14：变量、常量声明
	ruby：foo = 1 声明一个变量foo 其值为1 即在之后可以进行修改
		  Foo = 2 声明一个常量Foo 其值为1 如果之后赋值 其会警告 但是会完成赋值操作
		  		  O__O "........."
	python：只有变量 没有常量

15：内嵌命令
	ruby：ENV 返回操作系统的环境变量
		  RUBY_PLATFORM 返回ruby版本

16：空
	ruby：nil在ruby中表示为空
		  在逻辑运算中表示空
		  除此之外，false 也表示为假
		  其余的所有（1,0）的都表示真
	python：True为真，1为真，列表不为空为真
			False为假，0为假，空列表为假

17：单行注解
	ruby和python都为单行注解，不过在python中一般在文件开头的起始位置的为标注编码格式：
	# -*- conding:utf-8 -*-

18：阵列Array
	ruby和python都可以用[]所包括的一系列的数据表示一个阵列，不过在python中叫做列表List，在ruby中叫做阵列Array，他们当中的元素数据类型都可以不保持一致 如 array1 = [1,"1",2,nil],在ruby中当用下标访问阵列中的元素时，如果下标超出，ruby会返回nil，而python会报错（# IndexError: list index out of range # ）。
	对于一个变量阵列 
	ruby：array1 = [1,"1",2,nil]
		在array1的结尾添加一个元素
			array1.push("last") 
			array1 << "last"
		去掉最后一个元素
			array1.pop() 返回值为抛弃的元素
		查询
			array1.last 返回阵列最后一个元素
			array1.first 返回阵列第一个元素
		阵列变字符串
			array1.join('==')
		阵列变字符串
	python：array1 = [1,"1",2,None]
		在array1的结尾添加一个元素
			array1 + "last"
			array1.extend("last")
		去掉最后一个元素
			array1.pop() 返回值为抛弃的元素
		查询 通过下标
			array1[-1] 返回列表最后一个元素
			array1[0] 返回列表第一个元素
		阵列变字符串
			'=='.join(array1) 此时需要注意array1中的元素必须全部为str类型

	ruby和python的对字符串的切分用法一致都是使用array1.split('==')

19：循环
	对于一个阵列
	languages = ["Ruby","Python","CPP"]
	ruby:
		对阵列的每一个元素都操作
		languages.each do |lang|
			puts "I love #{lang}!"
		end
	python:
		对阵列的每一个元素都操作
		for each in languages"
			print("I love %s!"%each)

20：哈希表和字典
	ruby(hash哈希表)：
		config = {"foo" => 123 ,"bar" => 456}
		puts(config["foo"])
		在使用ruby的hash哈希表的时候，一般使用字串符号Symbols作为key值，Symbols一旦被创建之后，地址就是固定的
		可以写作：
		config = {:foo => 123,:bar => 456}
		也可以写作：
		config = {foo:123,bar:456}
		puts(config[:foo])
		遍历哈希
		config.each do |key,value|
			puts("#{key} is #{value}")
		end

	python(dict字典)：
		dict = {"foo":123,"bar":4456} 在Python中dict是关键字不能作为变量名，现在只是举例
		print(dict["foo"])	
		for k,v in dict.iteritems():
			print(k,v)

21：流程控制
	逻辑运算符 
		>(大于),
		<（小于）,
		>=（大于等于）,
		<=（小于等于）,
		!=（不等于）,
		==（等于）,
		&&（和）,
		||（或）
		用法相同
	ruby条件判断句语法：
		if ...
			do something
		elsif ...
			do something
		else
			do something
		end
	python条件判断句语法：
		if ...:
			do something
		elif ...:
			do something
		else:
			do something

22：三元运算
	a跟b作比较，如果比较的结果成立（为真），输出outputA，反之输出outputB
	ruby:
		(a>b)?outputA:outputb
	python：
		a > b?outputA:outputb

23：开关条件语句
	ruby:
		case name
			when "John"
				puts "Hi John"
			when "Ryan"
				puts "Hi Ryan"
			else
				puts "Hi #{name}"
		end
	python没有类似的语法（switch）


24：while循环和控制循环语法
	ruby：
		例子1：
			i = 0
			while(i<10)
				i+=1
				next if i%2 == 0 #跳到下一次循环
				puts i 
			end
		例子2：
			i = 0
			i += 1 until i > 10
			puts i
		例子3：
			i = 0
			loop do
				i += 1
				break if i > 10
			end
	python:
		i = 0
		while i < 10:
			print(i)
			i += 1
	需要关注一点的是，在ruby中，如果在循环中使用了break，表示跳出当前循环，开始下一次循环，而在python中表示中断循环，执行循环下面的语句，如果想要达到跳入下一次循环的效果需要使用关键字continue